# version
__version__ = "1.0.1"

# python
import os
import sys
import logging
import shutil
import pandas as pd

# cytomine
import cytomine
from cytomine.models.annotation import AnnotationCollection, Annotation
from cytomine.models.image import InstanceCollection
from cytomine.models.software import JobData


# ------------------------------ Support functions ------------------------------

# Función que recoge las coordenadas de todas las anotaciones manuales
def anotaciones_general(params):
    general_annots = AnnotationCollection()
    general_annots.project = params.cytomine_id_project
    
    general_annots.showWKT = True
    general_annots.showMeta = True
    general_annots.showGIS = True
    general_annots.showTerm = True
    
    general_annots.fetch()
    
    return general_annots

# ------------------------------ Step functions ------------------------------

# STEP 1: parches (los parches son anotaciones manuales con un tamaño específico: 1024x1024 ó 2048x2048)
###def get_parches(params):
    


# ------------------------------ Main function ------------------------------
def run(cyto_job, parameters):
    logging.info("----- test software v%s -----", __version__)
    logging.info("Entering run(cyto_job=%s, parameters=%s)", cyto_job, parameters)

    job = cyto_job.job
    project = cyto_job.project

    # I create a working directory that I will delete at the end of this run
    working_path = os.path.join("tmp", str(job.id))
    if not os.path.exists(working_path):
        logging.info("Creating working directory: %s", working_path)
        os.makedirs(working_path)

    try:
        general_annots = anotaciones_general(parameters)
        
        ID_list = []
        Image_list = []
        Project_list = []
        Term_list = []
        User_list = []
        Area_list = []
        Perimeter_list = []
        WKT_list = []
        
        for general_annot in general_annots:
            ID_list.append(general_annot.id)
            Image_list.append(general_annot.image)
            Project_list.append(general_annot.project)
            Term_list.append(general_annot.term)
            User_list.append(general_annot.user)
            Area_list.append(general_annot.area)
            Perimeter_list.append(general_annot.perimeter)
            WKT_list.append(general_annot.location)
            
        dict = {"ID": ID_list,
               "Image":Image_list,
               "Project":Project_list,
               "Term":Term_list,
               "User":User_list,
               "Area":Area_list,
               "Perimeter":Perimeter_list,
               "WKT":WKT_list}
        final = pd.DataFrame(data=dict)
        
        output_path = os.path.join(working_path, "output.txt")
        f= open(output_path,"w+")
        f.write(final)
        f.close() 

        #I save a file generated by this run into a "job data" that will be available in the UI. 
        job_data = JobData(job.id, "Generated File", "output.txt").save()
        job_data.upload(output_path)

    finally:
        logging.info("Deleting folder %s", working_path)
        shutil.rmtree(working_path, ignore_errors=True)
        logging.debug("Leaving run()")


if __name__ == "__main__":
    logging.debug("Command: %s", sys.argv)

    with cytomine.CytomineJob.from_cli(sys.argv) as cyto_job:
        run(cyto_job, cyto_job.parameters)


