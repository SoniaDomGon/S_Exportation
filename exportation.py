# version
__version__ = "1.0.7"

# python
import json
import logging
import os
from shapely.geometry import Polygon
import shutil
import sys

# cytomine
import cytomine
from cytomine.models.annotation import Annotation, AnnotationCollection
from cytomine.models.image import ImageInstance
from cytomine.models.software import Job, JobCollection, JobData, JobDataCollection
from cytomine.models.user import UserJob, UserJobCollection


# ------------------------------ Support functions ------------------------------

# Obtención de la geometría de un polígono
def process_polygon(polygon):
    pol = str(polygon)[7:].rstrip("(").lstrip(")").split(",")
    for i in range(0, len(pol)):
        pol[i] = pol[i].rstrip(" ").lstrip(" ")
        pol[i] = pol[i].rstrip(")").lstrip("(").split(" ")
        pol[i][0] = float(pol[i][0])
        pol[i][1] = float(pol[i][1])
        pol[i] = tuple(pol[i])
    return pol
    
    
# Función que recoge las coordenadas de todas las anotaciones manuales
def get_anotaciones_general(params):
    general_annots = AnnotationCollection()
    general_annots.project = params.cytomine_id_project
    general_annots.image = params.image_to_analyze
    
    general_annots.showWKT = True
    general_annots.showMeta = True
    general_annots.showGIS = True
    general_annots.showTerm = True
    
    general_annots.fetch()
        
    return general_annots

# ------------------------------ Step functions ------------------------------

# STEP 1: buscar parches
def get_parches(anotaciones_general):
    parches = []
    for anot_gen in anotaciones_general:
        perimetro = Polygon(process_polygon(anot_gen.location)).length
        if perimetro == 1024*4:
            parches.append(anot_gen)
    return parches
# STEP 2: recuperar detecciones de dentro del parche


# STEP 3: buscar anotaciones manuales dentro del parche

# ------------------------------ Main function ------------------------------
def run(cyto_job, parameters):
    logging.info("----- test software v%s -----", __version__)
    logging.info("Entering run(cyto_job=%s, parameters=%s)", cyto_job, parameters)

    job = cyto_job.job
    project = cyto_job.project

    # I create a working directory that I will delete at the end of this run
    working_path = os.path.join("tmp", str(job.id))
    if not os.path.exists(working_path):
        logging.info("Creating working directory: %s", working_path)
        os.makedirs(working_path)

    try:
        #STEP 0: anotaciones en general
        general_annotations = get_anotaciones_general(parameters)
        # STEP 1: parches
        parches = get_parches(general_annotations)
        # STEP 2: detecciones
        
        # STEP 3: anotaciones manuales
         
        
        output_path = os.path.join(working_path, "output.json")
        f = open(output_path,"w+")
        json.dump(general_annotations, f)
        f.close()

        #I save a file generated by this run into a "job data" that will be available in the UI. 
        job_data = JobData(job.id, "Generated File", "output.json").save()
        job_data.upload(output_path)

    finally:
        logging.info("Deleting folder %s", working_path)
        shutil.rmtree(working_path, ignore_errors=True)
        logging.debug("Leaving run()")


if __name__ == "__main__":
    logging.debug("Command: %s", sys.argv)

    with cytomine.CytomineJob.from_cli(sys.argv) as cyto_job:
        run(cyto_job, cyto_job.parameters)


